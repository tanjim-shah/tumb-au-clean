name: Tumblr Automation (OAuth 2.0) - Enhanced

on:
  schedule:
    # Generate posts daily at 9 AM UTC
    - cron: '0 9 * * *'
    # Post to Tumblr every 3 hours
    - cron: '0 */3 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'post'
        type: choice
        options:
        - generate
        - post
        - both
        - test
      force_post:
        description: 'Force post even if not scheduled'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  generate-posts:
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.action == 'generate' || github.event.inputs.action == 'both') ||
      (github.event_name == 'schedule' && github.event.schedule == '0 9 * * *')
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-genai requests beautifulsoup4 lxml
    
    - name: üìÅ Create data directory
      run: mkdir -p data
    
    - name: ü§ñ Generate Tumblr posts
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        if [ -f ".github/scripts/generate_tumblr_posts.py" ]; then
          python .github/scripts/generate_tumblr_posts.py
        else
          echo "‚ö†Ô∏è Post generation script not found"
          echo "Please add .github/scripts/generate_tumblr_posts.py to your repository"
        fi
    
    - name: üíæ Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add data/
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No new posts generated"
        else
          git commit -m "ü§ñ Add generated Tumblr posts - $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "‚úÖ New posts committed and pushed"
        fi

  test-connection:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'test'
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: üß™ Test Tumblr API connection
      env:
        TUMBLR_CLIENT_ID: ${{ secrets.TUMBLR_CLIENT_ID }}
        TUMBLR_CLIENT_SECRET: ${{ secrets.TUMBLR_CLIENT_SECRET }}
        TUMBLR_BLOG_NAME: ${{ secrets.TUMBLR_BLOG_NAME }}
      run: |
        python -c "
        import sys
        sys.path.append('.github/scripts')
        
        try:
            from post_to_tumblr_oauth2_improved import TumblrOAuth2Poster
            poster = TumblrOAuth2Poster()
            if poster.access_token:
                print('‚úÖ Token is available')
                if poster.test_api_connection():
                    print('‚úÖ API connection successful')
                else:
                    print('‚ùå API connection failed')
                    sys.exit(1)
            else:
                print('‚ùå No valid token available')
                sys.exit(1)
        except Exception as e:
            print(f'‚ùå Test failed: {e}')
            sys.exit(1)
        "

  post-to-tumblr:
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.action == 'post' || github.event.inputs.action == 'both') ||
      (github.event_name == 'schedule' && github.event.schedule != '0 9 * * *')
    runs-on: ubuntu-latest
    needs: [generate-posts]
    if: always() && (needs.generate-posts.result == 'success' || needs.generate-posts.result == 'skipped')
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: üîÑ Pull latest changes
      run: git pull origin main || git pull origin master || true
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: üìÅ Ensure data directory exists
      run: mkdir -p data
    
    - name: üìä Check pending posts
      run: |
        if [ -f "data/pending_posts.csv" ]; then
          echo "üìÑ Pending posts file found"
          echo "Posts in queue: $(tail -n +2 data/pending_posts.csv 2>/dev/null | wc -l || echo '0')"
          echo "Next few scheduled posts:"
          head -5 data/pending_posts.csv || echo "No posts found"
        else
          echo "‚ö†Ô∏è No pending posts file found"
        fi
    
    - name: üöÄ Post to Tumblr (OAuth 2.0)
      env:
        TUMBLR_CLIENT_ID: ${{ secrets.TUMBLR_CLIENT_ID }}
        TUMBLR_CLIENT_SECRET: ${{ secrets.TUMBLR_CLIENT_SECRET }}
        TUMBLR_BLOG_NAME: ${{ secrets.TUMBLR_BLOG_NAME }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        SMTP_SERVER: smtp.gmail.com
        SMTP_PORT: 587
        FORCE_POST: ${{ github.event.inputs.force_post }}
      run: |
        if [ -f ".github/scripts/post_to_tumblr_oauth2_improved.py" ]; then
          python .github/scripts/post_to_tumblr_oauth2_improved.py
        elif [ -f ".github/scripts/post_to_tumblr_oauth2.py" ]; then
          echo "‚ö†Ô∏è Using original script (consider upgrading to improved version)"
          python .github/scripts/post_to_tumblr_oauth2.py
        else
          echo "‚ùå No posting script found"
          exit 1
        fi
    
    - name: üíæ Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add data/
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
        else
          git commit -m "üìù Update posted logs - $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "‚úÖ Changes committed and pushed"
        fi
    
    - name: üìà Upload logs as artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: tumblr-logs-${{ github.run_number }}
        path: |
          data/posted_logs.csv
          data/pending_posts.csv
        retention-days: 30

  cleanup-old-logs:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 9 * * *'
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üßπ Clean up old logs (keep last 1000 entries)
      run: |
        if [ -f "data/posted_logs.csv" ]; then
          echo "üßπ Cleaning up old log entries..."
          
          # Keep header and last 1000 entries
          head -1 data/posted_logs.csv > data/posted_logs_temp.csv
          tail -n +2 data/posted_logs.csv | tail -1000 >> data/posted_logs_temp.csv
          mv data/posted_logs_temp.csv data/posted_logs.csv
          
          echo "‚úÖ Log cleanup completed"
        else
          echo "‚ÑπÔ∏è No log file to clean up"
        fi
    
    - name: üßπ Clean up old tokens (optional security measure)
      run: |
        # Remove token files older than 30 days for security
        find data/ -name "*.json" -type f -mtime +30 -delete 2>/dev/null || true
        echo "üîê Old token cleanup completed"
    
    - name: üíæ Commit cleanup changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add data/
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No cleanup changes to commit"
        else
          git commit -m "üßπ Cleanup old logs - $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "‚úÖ Cleanup changes committed"
        fi

  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [post-to-tumblr]
    if: always()
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    
    - name: üìä Generate health report
      run: |
        echo "üè• Tumblr Automation Health Check"
        echo "================================"
        echo "Date: $(date)"
        echo "Last run: ${{ github.run_number }}"
        
        if [ -f "data/posted_logs.csv" ]; then
          echo "üìÑ Log file exists: ‚úÖ"
          echo "Total posts logged: $(tail -n +2 data/posted_logs.csv 2>/dev/null | wc -l || echo '0')"
          
          # Check recent success rate
          recent_posts=$(tail -20 data/posted_logs.csv 2>/dev/null | tail -n +2 || echo "")
          if [ -n "$recent_posts" ]; then
            success_count=$(echo "$recent_posts" | grep -c "True" || echo "0")
            total_count=$(echo "$recent_posts" | wc -l)
            echo "Recent success rate: $success_count/$total_count"
          fi
        else
          echo "üìÑ Log file exists: ‚ùå"
        fi
        
        if [ -f "data/pending_posts.csv" ]; then
          echo "üìã Pending posts file exists: ‚úÖ"
          pending_count=$(tail -n +2 data/pending_posts.csv 2>/dev/null | grep -c "False" || echo "0")
          echo "Pending posts: $pending_count"
        else
          echo "üìã Pending posts file exists: ‚ùå"
        fi
        
        echo "üéØ Workflow status: ${{ needs.post-to-tumblr.result }}"